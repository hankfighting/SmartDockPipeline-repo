{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "storageAccounts_dockerspheredevmain_name": {
            "defaultValue": "dockerspheredevmain",
            "type": "String"
        },
        "factories___externalid": {
            "defaultValue": "/subscriptions/*/resourceGroups/*/providers/Microsoft.DataFactory/factories/*",
            "type": "String"
        },
        "accounts___externalid": {
            "defaultValue": "/subscriptions/*/resourceGroups/*/providers/Microsoft.DataShare/accounts/*",
            "type": "String"
        },
        "workflows___externalid": {
            "defaultValue": "/subscriptions/*/resourceGroups/*/providers/Microsoft.Logic/workflows/*",
            "type": "String"
        },
        "workspaces___externalid": {
            "defaultValue": "/subscriptions/*/resourceGroups/*/providers/Microsoft.MachineLearningServices/workspaces/*",
            "type": "String"
        },
        "migrateprojects___externalid": {
            "defaultValue": "/subscriptions/*/resourceGroups/*/providers/Microsoft.Migrate/migrateprojects/*",
            "type": "String"
        },
        "workspaces___externalid_1": {
            "defaultValue": "/subscriptions/*/resourceGroups/*/providers/Microsoft.ProjectArcadia/workspaces/*",
            "type": "String"
        },
        "Accounts___externalid_1": {
            "defaultValue": "/subscriptions/*/resourceGroups/*/providers/Microsoft.Purview/Accounts/*",
            "type": "String"
        },
        "searchServices___externalid": {
            "defaultValue": "/subscriptions/*/resourceGroups/*/providers/Microsoft.Search/searchServices/*",
            "type": "String"
        },
        "servers___externalid": {
            "defaultValue": "/subscriptions/*/resourceGroups/*/providers/Microsoft.Sql/servers/*",
            "type": "String"
        },
        "streamingjobs___externalid": {
            "defaultValue": "/subscriptions/*/resourceGroups/*/providers/Microsoft.StreamAnalytics/streamingjobs/*",
            "type": "String"
        },
        "workspaces___externalid_2": {
            "defaultValue": "/subscriptions/*/resourceGroups/*/providers/Microsoft.Synapse/workspaces/*",
            "type": "String"
        },
        "registries___externalid": {
            "defaultValue": "/subscriptions/b9b8ddd9-cb91-4793-ad23-2efaa0b4403c/resourceGroups/*/providers/Microsoft.ContainerRegistry/registries/*",
            "type": "String"
        },
        "virtualNetworks_RegionApplication_externalid": {
            "defaultValue": "/subscriptions/b9b8ddd9-cb91-4793-ad23-2efaa0b4403c/resourceGroups/DockeSphereDev/providers/Microsoft.Network/virtualNetworks/RegionApplication",
            "type": "String"
        }
    },
    "variables": {},
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-01-01",
            "name": "[parameters('storageAccounts_dockerspheredevmain_name')]",
            "location": "southeastasia",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "routingPreference": {
                    "routingChoice": "MicrosoftRouting",
                    "publishMicrosoftEndpoints": true,
                    "publishInternetEndpoints": true
                },
                "azureFilesIdentityBasedAuthentication": {
                    "directoryServiceOptions": "None"
                },
                "minimumTlsVersion": "TLS1_0",
                "allowBlobPublicAccess": true,
                "isHnsEnabled": true,
                "networkAcls": {
                    "resourceAccessRules": [
                        {
                            "tenantId": "5c7d0b28-bdf8-410c-aa93-4df372b16203",
                            "resourceId": "[parameters('factories___externalid')]"
                        },
                        {
                            "tenantId": "5c7d0b28-bdf8-410c-aa93-4df372b16203",
                            "resourceId": "[parameters('accounts___externalid')]"
                        },
                        {
                            "tenantId": "5c7d0b28-bdf8-410c-aa93-4df372b16203",
                            "resourceId": "[parameters('workflows___externalid')]"
                        },
                        {
                            "tenantId": "5c7d0b28-bdf8-410c-aa93-4df372b16203",
                            "resourceId": "[parameters('workspaces___externalid')]"
                        },
                        {
                            "tenantId": "5c7d0b28-bdf8-410c-aa93-4df372b16203",
                            "resourceId": "[parameters('migrateprojects___externalid')]"
                        },
                        {
                            "tenantId": "5c7d0b28-bdf8-410c-aa93-4df372b16203",
                            "resourceId": "[parameters('workspaces___externalid_1')]"
                        },
                        {
                            "tenantId": "5c7d0b28-bdf8-410c-aa93-4df372b16203",
                            "resourceId": "[parameters('Accounts___externalid_1')]"
                        },
                        {
                            "tenantId": "5c7d0b28-bdf8-410c-aa93-4df372b16203",
                            "resourceId": "[parameters('searchServices___externalid')]"
                        },
                        {
                            "tenantId": "5c7d0b28-bdf8-410c-aa93-4df372b16203",
                            "resourceId": "[parameters('servers___externalid')]"
                        },
                        {
                            "tenantId": "5c7d0b28-bdf8-410c-aa93-4df372b16203",
                            "resourceId": "[parameters('streamingjobs___externalid')]"
                        },
                        {
                            "tenantId": "5c7d0b28-bdf8-410c-aa93-4df372b16203",
                            "resourceId": "[parameters('workspaces___externalid_2')]"
                        },
                        {
                            "tenantId": "5c7d0b28-bdf8-410c-aa93-4df372b16203",
                            "resourceId": "[parameters('registries___externalid')]"
                        }
                    ],
                    "bypass": "Metrics, AzureServices",
                    "virtualNetworkRules": [
                        {
                            "id": "[concat(parameters('virtualNetworks_RegionApplication_externalid'), '/subnets/blobsubnet')]",
                            "action": "Allow",
                            "state": "Succeeded"
                        },
                        {
                            "id": "[concat(parameters('virtualNetworks_RegionApplication_externalid'), '/subnets/default')]",
                            "action": "Allow",
                            "state": "Succeeded"
                        }
                    ],
                    "ipRules": [],
                    "defaultAction": "Deny"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2021-01-01",
            "name": "[concat(parameters('storageAccounts_dockerspheredevmain_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_dockerspheredevmain_name'))]"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": [
                        {
                            "allowedOrigins": [
                                "https://lenovosmbdockerdev.b2clogin.com"
                            ],
                            "allowedMethods": [
                                "GET",
                                "OPTIONS"
                            ],
                            "maxAgeInSeconds": 200,
                            "exposedHeaders": [
                                "*"
                            ],
                            "allowedHeaders": [
                                "*"
                            ]
                        },
                        {
                            "allowedOrigins": [
                                "58.250.18.45"
                            ],
                            "allowedMethods": [
                                "GET",
                                "OPTIONS"
                            ],
                            "maxAgeInSeconds": 200,
                            "exposedHeaders": [
                                "*"
                            ],
                            "allowedHeaders": [
                                "*"
                            ]
                        },
                        {
                            "allowedOrigins": [
                                "http://localhost:8000"
                            ],
                            "allowedMethods": [
                                "OPTIONS",
                                "GET"
                            ],
                            "maxAgeInSeconds": 200,
                            "exposedHeaders": [
                                "*"
                            ],
                            "allowedHeaders": [
                                "*"
                            ]
                        }
                    ]
                },
                "deleteRetentionPolicy": {
                    "enabled": false
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices",
            "apiVersion": "2021-01-01",
            "name": "[concat(parameters('storageAccounts_dockerspheredevmain_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_dockerspheredevmain_name'))]"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "protocolSettings": {
                    "smb": {}
                },
                "cors": {
                    "corsRules": []
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/privateEndpointConnections",
            "apiVersion": "2021-01-01",
            "name": "[concat(parameters('storageAccounts_dockerspheredevmain_name'), '/', parameters('storageAccounts_dockerspheredevmain_name'), '.0e144f73-d88c-49cf-a71e-14d2c0eb91e9')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_dockerspheredevmain_name'))]"
            ],
            "properties": {
                "provisioningState": "Succeeded",
                "privateEndpoint": {},
                "privateLinkServiceConnectionState": {
                    "status": "Approved",
                    "description": "Auto-Approved",
                    "actionRequired": "None"
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/privateEndpointConnections",
            "apiVersion": "2021-01-01",
            "name": "[concat(parameters('storageAccounts_dockerspheredevmain_name'), '/', parameters('storageAccounts_dockerspheredevmain_name'), '.85704b21-1f12-42e6-81ee-1dc3c4a38e49')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_dockerspheredevmain_name'))]"
            ],
            "properties": {
                "provisioningState": "Succeeded",
                "privateEndpoint": {},
                "privateLinkServiceConnectionState": {
                    "status": "Approved",
                    "description": "Auto-Approved",
                    "actionRequired": "None"
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/queueServices",
            "apiVersion": "2021-01-01",
            "name": "[concat(parameters('storageAccounts_dockerspheredevmain_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_dockerspheredevmain_name'))]"
            ],
            "properties": {
                "cors": {
                    "corsRules": []
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/tableServices",
            "apiVersion": "2021-01-01",
            "name": "[concat(parameters('storageAccounts_dockerspheredevmain_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_dockerspheredevmain_name'))]"
            ],
            "properties": {
                "cors": {
                    "corsRules": []
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2021-01-01",
            "name": "[concat(parameters('storageAccounts_dockerspheredevmain_name'), '/default/docklog')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccounts_dockerspheredevmain_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_dockerspheredevmain_name'))]"
            ],
            "properties": {
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "Blob"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2021-01-01",
            "name": "[concat(parameters('storageAccounts_dockerspheredevmain_name'), '/default/dockmessages')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccounts_dockerspheredevmain_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_dockerspheredevmain_name'))]"
            ],
            "properties": {
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "Blob"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2021-01-01",
            "name": "[concat(parameters('storageAccounts_dockerspheredevmain_name'), '/default/eventgriddeadletter')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccounts_dockerspheredevmain_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_dockerspheredevmain_name'))]"
            ],
            "properties": {
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2021-01-01",
            "name": "[concat(parameters('storageAccounts_dockerspheredevmain_name'), '/default/twinlogs')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccounts_dockerspheredevmain_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_dockerspheredevmain_name'))]"
            ],
            "properties": {
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "Blob"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
            "apiVersion": "2021-01-01",
            "name": "[concat(parameters('storageAccounts_dockerspheredevmain_name'), '/default/deckspheredevfunction09afa')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccounts_dockerspheredevmain_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_dockerspheredevmain_name'))]"
            ],
            "properties": {
                "accessTier": "TransactionOptimized",
                "shareQuota": 5120,
                "enabledProtocols": "SMB"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
            "apiVersion": "2021-01-01",
            "name": "[concat(parameters('storageAccounts_dockerspheredevmain_name'), '/default/eventgrid')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccounts_dockerspheredevmain_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_dockerspheredevmain_name'))]"
            ],
            "properties": {
                "metadata": {}
            }
        }
    ]
}